The project directory is structured as follows:

	./bin       Compiled executables
	./build     Temporary directory for object files and the like
	./include   Headers
	./lib       Object archives for easier dependency management
	            and library modularity
	./src       Library source code
	./test      Contains test input files and scripts for testing
                    component-drivers against those files

The available make targets are:

	all               Builds all library and driver binaries
	clean             Removes binary and object files

	mcc               Builds the main executable

	text_processing   Builds the text processing library
	tokenizer         Builds the tokenization library (depends
	                  on the text processing library)
	symbol            Builds the symbol table facilities
	ast               Builds the abstract syntax tree library

	testall           Runs all available top-level tests
	test-scanner      Runs the test script for the scanner
	test-parser       Runs the test script for the parser

Additional arguments may be passed to the compiler by setting the
CXXFLAGS environment variable.

The main executable takes as its first argument the name of the file
to be compiled; '-' may be given as the first argument to indicate
that input should be read from STDIN. Additionally, '-Tscanner' may
be passed as the second argument to print output from the scanner
stage, terminating before the parsing stage. If the '-Tscanner'
argument is not specified, the output of the parser will be printed
instead as of nested s-expressions of them form:

	(production-rule &rest components)

The grammar matched by this program is slightly modified, allowing
lists to be represented as true lists, rather than recursively along
the tree. This grammar is specified in the file 'GRAMMAR'.

Testing may be performed through make, or
'test/[component]/run_tests.bash' may be invoked directly The test
script may be run in verbose mode (via -v), displaying the
component's output as normal.

Building this project requires a mostly C++11-compliant compiler and
standard library. At this point, no third-party libraries are in use.
The project compiles successfully under GCC/libstdc++ 4.6.3,
accessible at athena.cs.txstate.edu.

The source tree is described in 'ABOUT'.
