Making node =======================
<keyword, int, (1, 1)>
============================== Done
Making node =======================
intTypeSpec
<keyword, int, (1, 1)>

============================== Done
Making node =======================
typeSpecifier
<keyword, int, (1, 1)>

============================== Done
Making node =======================
<identifier, main, (1, 5)>
============================== Done
Making node =======================
<symbol, (, (1, 9)>
============================== Done
Making node =======================
<symbol, ), (1, 10)>
============================== Done
Making node =======================
<symbol, {, (1, 12)>
============================== Done
Making node =======================
<keyword, int, (3, 3)>
============================== Done
Making node =======================
intTypeSpec
<keyword, int, (3, 3)>

============================== Done
Making node =======================
<identifier, x, (3, 7)>
============================== Done
Making node =======================
<symbol, =, (3, 9)>
============================== Done
Making node =======================
<int_literal, 0, (3, 11)>
============================== Done
Making node =======================
rvalue
<int_literal, 0, (3, 11)>

============================== Done
Making node =======================
term
<int_literal, 0, (3, 11)>

============================== Done
Making node =======================
addExpr
<int_literal, 0, (3, 11)>

============================== Done
Making node =======================
relExpr
<int_literal, 0, (3, 11)>

============================== Done
Making node =======================
equivExpr
<int_literal, 0, (3, 11)>

============================== Done
Making node =======================
expression
<int_literal, 0, (3, 11)>

============================== Done
Making node =======================
varDecl
<keyword, int, (3, 3)>

<identifier, x, (3, 7)>

<symbol, =, (3, 9)>

<int_literal, 0, (3, 11)>

============================== Done
Making node =======================
<symbol, ;, (3, 12)>
============================== Done
Making node =======================
varDeclStmt
(varDecl
  <keyword, int, (3, 3)>
  <identifier, x, (3, 7)>
  <symbol, =, (3, 9)>
  <int_literal, 0, (3, 11)>)

<symbol, ;, (3, 12)>

============================== Done
Making node =======================
statement
(varDeclStmt
  (varDecl
    <keyword, int, (3, 3)>
    <identifier, x, (3, 7)>
    <symbol, =, (3, 9)>
    <int_literal, 0, (3, 11)>)
  <symbol, ;, (3, 12)>)

============================== Done
Making node =======================
<symbol, {, (4, 3)>
============================== Done
Making node =======================
<identifier, x, (5, 5)>
============================== Done
Making node =======================
lvalue
<identifier, x, (5, 5)>

============================== Done
Making node =======================
<identifier, x, (5, 5)>
============================== Done
Making node =======================
<identifier, x, (5, 5)>
============================== Done
Making node =======================
lvalue
<identifier, x, (5, 5)>

============================== Done
Making node =======================
rvalue
<identifier, x, (5, 5)>

============================== Done
Making node =======================
term
<identifier, x, (5, 5)>

============================== Done
Making node =======================
<symbol, +, (5, 6)>
============================== Done
Making node =======================
addop
<symbol, +, (5, 6)>

============================== Done
Making node =======================
addExpr
<identifier, x, (5, 5)>

============================== Done
Making node =======================
relExpr
<identifier, x, (5, 5)>

============================== Done
Making node =======================
equivExpr
<identifier, x, (5, 5)>

============================== Done
Making node =======================
expression
<identifier, x, (5, 5)>

============================== Done
