program : decl declList

declList : decl declList
         | ε

decl : varDeclStmt
     | funDecl

varDeclStmt : varDecl ;

varDecl : stringDecl
        | intTypeSpec ID = expression
        | intTypeSpec ID
        | intTypeSpec ID [ ] = initBraceList
        | intTypeSpec ID [ expression ] = initBraceList
        | intTypeSpec ID [ expression ]

stringDecl : char ID [ ] = STRING
           | char ID [ expression ] = STRING
           | char ID [ expression ] // Equivalent to last rule of varDecl for char

intTypeSpec : int
            | char

typeSpecifier : intTypeSpec
              | void

initBraceList : { exprList }
              | { }

exprList : expression , exprList
         | expression

funDecl : typeSpecifier ID ( formalDeclList ) compoundStmt
        | typeSpecifier ID ( ) compoundStmt

formalDeclList : formalDecl , formalDeclList
               | formalDecl

formalDecl : varDecl
           | typeSpecifier ID [ ]

statementList : statement statementList
              | ε

statement : varDeclStmt
          | compoundStmt
          | condStmt
          | loopStmt
          | returnStmt
          | ;
          | expression ;

compoundStmt : { statementList }

condStmt : if ( expression ) statement else statement
         | if ( expression ) statement

loopStmt : while ( expression ) statement

returnStmt : return expression ;
           | return ;

lvalue : ID [ expression ]
       | ID

rvalue : ( expression )
       | funcCallExpr
       | lvalue
       | NUM
       | CHAR
       | STRING

expression : lvalue = expression
           | equivExpr

equivExpr : equivExpr equivop relExpr
          | relExpr

equivop : ==
        | !=

relExpr : relExpr relop addExpr
        | addExpr

relop : >=
      | >
      | <=
      | <

addExpr : addExpr addop term
        | term

addop : +
      | -

term : term mulop rvalue
     | rvalue

mulop : *
      | /

funcCallExpr : ID argList

argList : ( exprList )
        | ( )
